the useMemo hook is used to memoize a value, meaning it calculates a value only when one of the dependencies has changed. It helps optimize performance by avoiding unnecessary re-computation of values.

const memoizedValue = useMemo(() => calculateValue, dependencies);


calculateValue is a function that calculates the value you want to memoize.
dependencies is an array of dependencies that, when changed, will trigger the recalculation of the value.

import React, { useMemo, useState } from 'react';

function ParentComponent() {
  const [count, setCount] = useState(0);

  const expensiveValue = useMemo(() => {
    console.log('Calculating expensive value');
    // Perform some expensive calculations or data processing
    return count * 2;
  }, [count]);

  return (
    <div>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      <p>Count: {count}</p>
      <p>Expensive Value: {expensiveValue}</p>
    </div>
  );
}
